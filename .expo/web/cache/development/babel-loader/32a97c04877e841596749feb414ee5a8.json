{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/danielzaucha/beer-finder-app/src/screens/ListScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport API_URL from \"../config\";\n\nvar ListScreen = function (_React$Component) {\n  _inherits(ListScreen, _React$Component);\n\n  var _super = _createSuper(ListScreen);\n\n  function ListScreen() {\n    var _this;\n\n    _classCallCheck(this, ListScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      items: [],\n      loading: true,\n      error: null\n    };\n\n    _this.fetchData = function () {\n      fetch(API_URL).then(function (response) {\n        return response.json();\n      }).then(function (json) {}).catch(function (error) {\n        _this.setState({\n          error: 'Someting went wrong when fetching beer list'\n        });\n      });\n    };\n\n    _this.renderList = function () {\n      React.createElement(FlatList, {\n        data: DATA,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(Item, {\n            id: item.id,\n            title: item.title,\n            selected: !!selected.get(item.id),\n            onSelect: onSelect,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 9\n            }\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        },\n        extraData: selected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 5\n        }\n      });\n    };\n\n    _this.render = function () {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }, _this.state.loading ? React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: \"#0000ff\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }\n      }) : _this.renderList());\n    };\n\n    return _this;\n  }\n\n  return ListScreen;\n}(React.Component);\n\nexport { ListScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/danielzaucha/beer-finder-app/src/screens/ListScreen.js"],"names":["React","API_URL","ListScreen","state","items","loading","error","fetchData","fetch","then","response","json","catch","setState","renderList","DATA","item","id","title","selected","get","onSelect","render","styles","container","Component","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAGA,OAAOC,OAAP;;IAEqBC,U;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE,IAFH;AAGNC,MAAAA,KAAK,EAAE;AAHD,K;;UAMRC,S,GAAY,YAAM;AAChBC,MAAAA,KAAK,CAACP,OAAD,CAAL,CACGQ,IADH,CACQ,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,OADR,EAEGF,IAFH,CAEQ,UAACE,IAAD,EAAU,CAEf,CAJH,EAKGC,KALH,CAKS,UAACN,KAAD,EAAW;AAChB,cAAKO,QAAL,CAAc;AAAEP,UAAAA,KAAK,EAAE;AAAT,SAAd;AACD,OAPH;AAQD,K;;UAEDQ,U,GAAa,YAAM;AACjB,0BAAC,QAAD;AACE,QAAA,IAAI,EAAEC,IADR;AAEE,QAAA,UAAU,EAAE;AAAA,cAAGC,IAAH,QAAGA,IAAH;AAAA,iBACV,oBAAC,IAAD;AACE,YAAA,EAAE,EAAEA,IAAI,CAACC,EADX;AAEE,YAAA,KAAK,EAAED,IAAI,CAACE,KAFd;AAGE,YAAA,QAAQ,EAAE,CAAC,CAACC,QAAQ,CAACC,GAAT,CAAaJ,IAAI,CAACC,EAAlB,CAHd;AAIE,YAAA,QAAQ,EAAEI,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADU;AAAA,SAFd;AAUE,QAAA,YAAY,EAAE,sBAACL,IAAD;AAAA,iBAAUA,IAAI,CAACC,EAAf;AAAA,SAVhB;AAWE,QAAA,SAAS,EAAEE,QAXb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaD,K;;UAEDG,M,GAAS,YAAM;AACb,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,MAAKrB,KAAL,CAAWE,OAAX,GACC,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,KAAK,EAAC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,GAGC,MAAKS,UAAL,EAJJ,CADF;AASD,K;;;;;;EA5CqCd,KAAK,CAACyB,S;;SAAzBvB,U;AA+CrB,IAAMqB,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP;AADoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, ActivityIndicator, View, Text } from 'react-native';\n\nimport API_URL from '../config';\n\nexport default class ListScreen extends React.Component {\n  state = {\n    items: [],\n    loading: true,\n    error: null,\n  };\n\n  fetchData = () => {\n    fetch(API_URL)\n      .then((response) => response.json())\n      .then((json) => {\n        // this.setState();\n      })\n      .catch((error) => {\n        this.setState({ error: 'Someting went wrong when fetching beer list' });\n      });\n  };\n\n  renderList = () => {\n    <FlatList\n      data={DATA}\n      renderItem={({ item }) => (\n        <Item\n          id={item.id}\n          title={item.title}\n          selected={!!selected.get(item.id)}\n          onSelect={onSelect}\n        />\n      )}\n      keyExtractor={(item) => item.id}\n      extraData={selected}\n    />;\n  };\n\n  render = () => {\n    return (\n      <View style={styles.container}>\n        {this.state.loading ? (\n          <ActivityIndicator size='large' color='#0000ff' />\n        ) : (\n          this.renderList()\n        )}\n      </View>\n    );\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}